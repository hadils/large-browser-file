{"version":3,"sources":["app/core.cljs"],"mappings":"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","names":["app.core/image-file-url","reagent.core.atom","app.core/canvas-width","app.core/canvas-height","js/app","js/app.core","js/app.core.app-state","app.core/app-state","app.core/draw","id","canvas","js/document.getElementById","ctx","image","js/Image","_","cljs.core/deref","js/console.error","app.core/deg-to-rad","degrees","Math/PI","app.core/draw-image","x","y","scale","rotation","scaled-width","scaled-height","cljs.core.println","app.core/create-image","image-file","callback","js/document","cljs.core.swap_BANG_","cljs.core/assoc","app.core/convert-image","data","buf","app.core/on-image-change","event","js/URL","cljs.core/first","cljs.core/reset!","app.core/on-mouse-down","rect","app.core/on-mouse-move","temp__5804__auto__","drag-start","dx","dy","new-pos","app.core/on-mouse-up","app.core/app","app.core/mount","reagent.dom.render","app.core/init"],"sourcesContent":["(ns app.core\n  (:require [reagent.core :as r]\n            [reagent.dom :as rdom]))\n\n#_(def vertex-shader-source\n    \"attribute vec4 a_position;\n    void main() {\n        gl_Position = a_position;\n    }\")\n\n#_(def fragment-shader-source\n    \"precision mediump float;\n   uniform vec4 u_color;\n    void main() {\n        gl_FragColor = u_color;\n   }\")\n\n#_(defn create-shader [gl type source]\n    (let [shader (.createShader gl type)]\n      (.shaderSource gl shader source)\n      (.compileShader gl shader)\n      (if ^boolean (.getShaderParameter gl shader (.-COMPILE_STATUS gl))\n        shader\n        (do\n          (println (.-getShaderInfoLog shader))\n          (.deleteShader gl shader)\n          nil))))\n\n#_(defn create-program [gl vertex-shader fragment-shader]\n    (let [program (.createProgram gl)]\n      (.attachShader gl program (create-shader gl (.-VERTEX_SHADER gl) vertex-shader))\n      (.attachShader gl program (create-shader gl (.-FRAGMENT_SHADER gl) fragment-shader))\n      (.linkProgram gl program)\n      (if ^boolean (.getProgramParameter gl program (.-LINK_STATUS gl))\n        program\n        (do\n          (println (.-getProgramInfoLog program))\n          (.deleteProgram gl program)\n          nil))))\n\n#_(defn draw [id]\n    (let [canvas (js/document.getElementById id)\n          gl (or (.getContext canvas \"webgl\")\n                 (.getContext canvas \"experimental-webgl\"))\n          program (create-program gl vertex-shader-source fragment-shader-source)\n          position-attribute-location (.getAttribLocation gl program \"a_position\")\n          position-buffer (.createBuffer gl)\n          position-buffer-data (js/Float32Array. [-1 -1 0 1 -1 0 -1 1 0 1 1 0])]\n      (.bindBuffer gl (.-ARRAY_BUFFER gl) position-buffer)\n      (.bufferData gl (.-ARRAY_BUFFER gl) position-buffer-data (.-STATIC_DRAW gl))\n      (.clearColor gl 0 0 0 0)\n      (.clear gl (.-COLOR_BUFFER_BIT gl))\n      (.useProgram gl program)\n      (.enableVertexAttribArray gl position-attribute-location)\n      (.vertexAttribPointer gl position-attribute-location 3 (.-FLOAT gl) false 0 0)\n      (.drawArrays gl (.-TRIANGLE_STRIP gl) 0 4)))\n\n#_(defn file-info [id]\n    (let [upload-input (js/document.getElementById id)]\n      (set! (.-onchange upload-input)\n            (fn [e]\n              (let [files (.. e -target -files)]\n                (doseq [file files]\n                  (println \"file\" file \"name\" (.-name file) \"size\" (.-size file) \"type\" (.-type file))\n                  (let [reader (js/FileReader.)]\n                    (println \"reader\" reader)\n                    (set! (.-onload reader)\n                          (fn [e]\n                            (let [buf (.. e -target -result)]\n                              (println (.-byteLength buf) \"bytes read from\" (.-name file)\n                                       \"type\" (.-type file)\n                                       \"size\" (.-size file)\n                                       \"buf\" buf))))\n                    (.readAsArrayBuffer reader file))))))))\n\n(def image-file-url (r/atom nil))\n\n(def canvas-width 640)\n(def canvas-height 640)\n\n(defonce app-state (r/atom {:image nil\n                            :drag-start nil\n                            :image-pos {:x 0 :y 0}\n                            :image-scale 0.1\n                            :image-rotation 0}))\n\n(defn draw [id]\n  (let [canvas (js/document.getElementById id)\n        ctx (.getContext canvas \"2d\")\n        image (js/Image.)]\n    (set! (.-onload image) (fn [_] (.drawImage ctx image 0 0 canvas-width canvas-height)))\n    (if @image-file-url\n      (.setAttribute image \"src\" @image-file-url)\n      (js/console.error \"No image file URL yet.\"))))\n\n(defn deg-to-rad [degrees]\n  (* degrees (/ Math/PI 180)))\n\n#_(defn draw-transformed-image [canvas scale translation-x translation-y rotation]\n    (println \"draw-transformed-image\" canvas scale translation-x translation-y rotation)\n    (let [w (.-width canvas)\n          h (.-height canvas)\n          ctx (.getContext canvas \"2d\")\n          image (js/Image.)]\n      (set! (.-onload image) (fn [_]\n                               (.clearRect ctx 0 0 w h)\n                               (.transform ctx scale 0 0 scale 0 0)\n                               (.rotate ctx (deg-to-rad rotation))\n                               (.drawImage ctx image translation-x translation-y)))\n\n      (if @image-file-url\n        (.setAttribute image \"src\" @image-file-url)\n        (js/console.error \"No image file URL yet.\"))))\n\n(defn draw-image [canvas image x y scale rotation]\n  (let [ctx (.getContext canvas \"2d\")\n        scaled-width (* (.-width image) scale)\n        scaled-height (* (.-height image) scale)]\n    (println \"scale\" scale \" x\" x \" y\" y \" scaled-width\" scaled-width \" scaled-height\" scaled-height)\n    (.clearRect ctx 0 0 (.-width canvas) (.-height canvas))\n    (.save ctx)\n    (.rotate ctx (deg-to-rad rotation))\n    (.translate ctx (+ x (/ scaled-width 2)) (+ y (/ scaled-height 2)))\n    (.drawImage ctx image\n                (- (/ scaled-width 2))\n                (- (/ scaled-height 2))\n                scaled-width\n                scaled-height)\n    (.restore ctx)))\n\n(defn create-image [image-file callback]\n  (let [image (.createElement js/document \"img\")]\n    (set! (.-onload image) (fn [_] (callback image)))\n    (if @image-file-url\n      (do\n        (.setAttribute image \"src\" image-file)\n        (swap! app-state assoc :image image))\n      (js/console.error \"No image file URL yet.\"))))\n\n(defn convert-image [image]\n  (let [canvas (.createElement js/document \"canvas\")\n        ctx (.getContext canvas \"2d\")]\n    (set! (.-width canvas) (.-width image))\n    (set! (.-height canvas) (.-height image))\n    (.drawImage ctx image 0 0)\n    (let [data (.getImageData ctx 0 0 (.-width canvas) (.-height canvas))]\n      (println \"data\" data)\n      (let [buf (.-data data)]\n        (println \"width\" (.-width image) \"height\" (.-height image) \"bytes per pixel\" 3 \"buf\" buf)))))\n\n(defn on-image-change [event]\n  (let [image-file (.createObjectURL js/URL (first (.. event -target -files)))]\n    (println \"image-file\" image-file)\n    (reset! image-file-url image-file)\n    (create-image image-file convert-image)))\n\n(defn on-mouse-down [event]\n  (let [canvas (.getElementById js/document \"canvas\")\n        rect (.getBoundingClientRect canvas)\n        _ (println \"clientX\" (.-clientX event) \"clientY\" (.-clientY event) \"left\" (.-left rect) \"top\" (.-top rect) \"width\" (.-width rect) \"height\" (.-height rect))\n        x (- (.-clientX event) (.-left rect))\n        y (- (.-clientY event) (.-top rect))]\n    (swap! app-state assoc :drag-start {:x x :y y})))\n\n(defn on-mouse-move [event]\n  (when-let [drag-start (:drag-start @app-state)]\n    (let [canvas (.getElementById js/document \"canvas\")\n          rect (.getBoundingClientRect canvas)\n          x (- (.-clientX event) (.-left rect))\n          y (- (.-clientY event) (.-top rect))\n          dx (- x (:x drag-start))\n          dy (- y (:y drag-start))\n          _ (println \"dx\" dx \"dy\" dy \"x\" x \"y\" y \"drag-start\" drag-start)\n          new-pos {:x (+ (:x (:image-pos @app-state)) dx)\n                   :y (+ (:y (:image-pos @app-state)) dy)}]\n      (println \"new-pos\" new-pos)\n      (swap! app-state assoc :image-pos new-pos)\n      (draw-image  canvas (:image @app-state) (:x new-pos) (:y new-pos) (:image-scale @app-state) (:image-rotation @app-state))\n      (swap! app-state assoc :drag-start {:x x :y y}))))\n\n(defn on-mouse-up []\n  (swap! app-state assoc :drag-start nil))\n\n(defn app []\n  [:div\n   [:h1 \"Hello from React and Shadow CLJS!\"]\n   [:input {:type \"file\" :id \"input\" :multiple true :accept \"image/*\" :on-change on-image-change}]\n   [:canvas {:id \"canvas\" :width canvas-width :height canvas-height :style {:border \"1px solid black\"}\n             :on-mouse-down on-mouse-down\n             :on-mouse-move on-mouse-move\n             :on-mouse-up on-mouse-up\n             :on-mouse-leave on-mouse-up}]\n   [:button {:on-click #(draw-image (.getElementById js/document \"canvas\") (:image @app-state) 0 0 (:image-scale @app-state)\n                                    (:image-rotation @app-state))} \"Draw transformed image\"]])\n\n(defn ^:dev/after-load mount []\n  (rdom/render [app] (js/document.getElementById \"app\")))\n\n(defn init []\n  (mount))\n"]}